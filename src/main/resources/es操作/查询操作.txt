一、查询所有文档数据
	GET http://localhost:9200/索引名称/类型名称/_search

二、批量查询	
	GET http://localhost:9200/索引名称/类型名称/_mget
	{	
		#要查询的文档的id数组
		"ids":["001","003"]
	}

三、
POST test/student/_search
{
  "query": {
    "term": {
      "name":"candy"
    }
  },
  
  #排序，数组内可以设置多个字段
  "sort": [
    {
      "age": {
        "order": "desc"，
		#当一个字段内有多个数值时，可以按字段内的min、max、sum、avg排序
		 "mode": "avg"
      }
    }
  ],
  
  #分页，size大小不能超过index.max_result_window设置值，默认为10000
  "from": 0,
  "size": 3,
  
  #过滤，默认true，即是否显示文档的所有字段
  "_source": false,
  #或者如下：includes包含显示哪些字段，excludes排除哪些字段
  #"_source": {
  #  "includes": ["id","name"],
  #  "excludes": ["age"]
  #}

  #返回版本号，默认为true
  "version": true
}

1.term
{
  "query": {
    "term": {   //不会对"str"进行分词，查询"fieldName"字段中含有"str"词项的文档
      "fieldName":"str"
    }
  }
}

2.terms
{
  "query": {
    "terms": {  //不会对"str1""str2","str3"...,进行分词，查询"fieldName"字段中含有"str1"或"str2"或"str3"...词项的文档
      "fieldName": [
        "str1",
        "str2",
        "str3",
        ...
      ]
    }
  }
}

3.match_all：返回所有文档
{
  "query": {
    "match_all": {}
  }
}

4.match
{
  "query": {
    "match": {      //会对"str"进行分词，查询"fieldName"字段中含有"str"分词后一个或多个词项的文档
      "fieldName": "str"
    }
  }
}

5.match_phrase：短语查询
{
  "query": {
    "match_phrase": {  //会对"str"进行分词，查询"fieldName"字段中含有"str"分词后所有词项的文档，且每一个词项的相对位置不变，即完全匹配"str"
      "fieldName": "str"
    }
  }
}

6.match_phrase_prefix:前缀匹配查询
{
  "query": {
    "match_phrase_prefix": { //查询"fieldName"字段中以"str"开头的文档（会对"str"进行分词）
      "fieldName": "str"
    }
  }
}

7.range:范围查询
{
  "query": {
    "range": {
      "fieldName": {
        "gte": 10,
        "lte": 20
        //"lt": 20
        //"gt": 10
      }
    }
  }
}

8.wildcard:通配符查询， *：任意个字符，包含0个字符， ?:一个字符
{
  "query": {
    "wildcard": {  //不会对"str"进行分词，查询"fieldName"字段中含有"str"词项的文档
      "fieldName": {
        "value": "str"
      }
    }
  }
}

9.正则表达式查询
{
    'query':{
        'regex':{
            'title':{
                'value':'cr.m[ae]',
                'boost':10.0
            }
        }
    }
}

10.bool
{
  "query": {
    "bool": {
      "filter": {   //必须全部满足
      },
      "must": [     //必须全部满足
        {}
      ],
      "must_not": [     //必须全部不满足
        {}
      ],
      "should": [       //可以满足0个或多个，满足的越多评分越高
        {}
      ]
    }
  }
}